(* User declarations *)

val prevLineNum = ref 0;
val lineNum = ref 1;
val prevCharNum = ref 0;
val charNum = ref 1;
val inString = ref 0;
val commentCnt = ref 0;
val str = ref "";
val stringPos = ref 0;
val stringLine = ref 0;
val commentPos = ref 0;
val commentLine = ref 0;

type arg = string;
type pos = int;
type svalue = Tokens.svalue;
type ('a, 'b) token = ('a, 'b) Tokens.token;
type lexresult = (svalue, pos) token;

fun eof fileName = Tokens.EOF (!lineNum, !charNum);

fun error_msg str = TextIO.print ("Illegal token \"" ^ str ^ "\" found in line " ^ 
                                  (Int.toString (!prevLineNum)) ^ " at position " ^ Int.toString (!prevCharNum) ^
                                  "\n");


%%

%header (functor PrettyPrinterLexFun(structure Tokens : PrettyPrinter_TOKENS));
%arg (fileName:string);

alpha = [a-zA-Z];
digits = [0-9];
ws = [\t\ ];
%s COMMENT STRING MULTILINE_STRING;


%%

<INITIAL> \n                                =>    ( prevLineNum := !lineNum; 
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    continue () );
<INITIAL> {ws}+                             =>    ( prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    continue () );
<INITIAL> "/*"                              =>    ( YYBEGIN COMMENT;
                                                    commentCnt := !commentCnt + 1;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    commentPos := !prevCharNum;
                                                    commentLine := !lineNum;
                                                    str := yytext;
                                                    continue () );
<COMMENT> "/*"                              =>    ( commentCnt := !commentCnt + 1;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () );
<COMMENT> "*/"                              =>    ( commentCnt := !commentCnt - 1;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    if (!commentCnt) = 0 then ( YYBEGIN INITIAL;
                                                                                Tokens.COMMENT (!str, !commentLine, !commentPos))
                                                                         else ( continue () ) );
<COMMENT> \n                                =>    ( prevLineNum := !lineNum; 
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    str := !str ^ yytext;
                                                    continue () );
<COMMENT> [*/]                              =>    ( prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () );
<COMMENT> [^*\n/]+                          =>    ( prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () );
<INITIAL> \"                                =>    ( YYBEGIN STRING;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    stringPos := !prevCharNum;
                                                    stringLine := !lineNum;
                                                    str := yytext;
                                                    continue () );
<STRING> [^\\"\n]+                          =>    ( prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () );
<STRING> \\ (n | t | \^{alpha} | {digits}{digits}{digits} | \" | \\)
                                            =>    ( prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () );
<STRING> \\{ws}*\n                          =>    ( YYBEGIN MULTILINE_STRING;
                                                    prevLineNum := !lineNum;
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    str := !str ^ yytext;
                                                    continue () );
<MULTILINE_STRING> {ws}*\n                  =>    ( prevLineNum := !lineNum;
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    str := !str ^ yytext;
                                                    continue () );
<MULTILINE_STRING> {ws}*\\                  =>    ( YYBEGIN STRING;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () );
<STRING> \"                                 =>    ( YYBEGIN INITIAL;
                                                    inString := 0;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    Tokens.STRING (!str, !stringLine, !stringPos) );
<INITIAL> array                             =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ARRAY (!lineNum, !prevCharNum) ); 
<INITIAL> break                             =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.BREAK (!lineNum, !prevCharNum) ); 
<INITIAL> do                                =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.DO (!lineNum, !prevCharNum) ); 
<INITIAL> else                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ELSE (!lineNum, !prevCharNum) ); 
<INITIAL> end                               =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.END (!lineNum, !prevCharNum) ); 
<INITIAL> for                               =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.FOR (!lineNum, !prevCharNum) ); 
<INITIAL> function                          =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.FUNCTION (!lineNum, !prevCharNum) ); 
<INITIAL> if                                =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.IF (!lineNum, !prevCharNum) ); 
<INITIAL> in                                =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.IN (!lineNum, !prevCharNum) ); 
<INITIAL> let                               =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LET (!lineNum, !prevCharNum) ); 
<INITIAL> nil                               =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.NIL (!lineNum, !prevCharNum) ); 
<INITIAL> of                                =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.OF (!lineNum, !prevCharNum) ); 
<INITIAL> then                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.THEN (!lineNum, !prevCharNum) ); 
<INITIAL> to                                =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.TO (!lineNum, !prevCharNum) ); 
<INITIAL> type                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.TYPE (!lineNum, !prevCharNum) ); 
<INITIAL> var                               =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.VAR (!lineNum, !prevCharNum) ); 
<INITIAL> while                             =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.WHILE (!lineNum, !prevCharNum) ); 
<INITIAL> "<>"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.NOTEQUAL (!lineNum, !prevCharNum) );  
<INITIAL> "<="                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LESSEQUAL (!lineNum, !prevCharNum) );  
<INITIAL> ">="                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.GREATEREQUAL (!lineNum, !prevCharNum) );  
<INITIAL> ":="                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ASSIGN (!lineNum, !prevCharNum) );  
<INITIAL> "("                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LPAREN (!lineNum, !prevCharNum) );  
<INITIAL> ")"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.RPAREN (!lineNum, !prevCharNum) );  
<INITIAL> "{"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LBRACES (!lineNum, !prevCharNum) );  
<INITIAL> "}"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.RBRACES (!lineNum, !prevCharNum) );  
<INITIAL> "["                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LBRACKETS (!lineNum, !prevCharNum) );  
<INITIAL> "]"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.RBRACKETS (!lineNum, !prevCharNum) ); 
<INITIAL> ":"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.COLON (!lineNum, !prevCharNum) );    
<INITIAL> ";"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.SEMICOLON (!lineNum, !prevCharNum) );    
<INITIAL> "."                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.DOT (!lineNum, !prevCharNum) );  
<INITIAL> ","                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.COMMA (!lineNum, !prevCharNum) );
<INITIAL> "+"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.PLUS (!lineNum, !prevCharNum) );
<INITIAL> "-"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.MINUS (!lineNum, !prevCharNum) ); 
<INITIAL> "="                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.EQUALS (!lineNum, !prevCharNum) );  
<INITIAL> "*"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.MULTIPLY (!lineNum, !prevCharNum) ); 
<INITIAL> "/"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.DIVIDE (!lineNum, !prevCharNum) ); 
<INITIAL> "<"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LESS (!lineNum, !prevCharNum) ); 
<INITIAL> ">"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.GREATER (!lineNum, !prevCharNum) ); 
<INITIAL> "&"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.AND (!lineNum, !prevCharNum) ); 
<INITIAL> "|"                              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.OR (!lineNum, !prevCharNum) ); 
<INITIAL> {digits}+                         =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.INTEGER (valOf (Int.fromString yytext), !lineNum, !prevCharNum) );
<INITIAL> {alpha}[a-zA-Z0-9_]*              =>    ( YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ID (yytext, !lineNum, !prevCharNum) );
.                                           =>    ( prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    error_msg yytext; 
                                                    continue () );